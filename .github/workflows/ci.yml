name: Dev Container CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should-build: ${{ steps.changes.outputs.devcontainer }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          devcontainer:
            - '.devcontainer/**'
            - 'Dockerfile'
            - 'docker-compose.yml'
    
    - name: Validate devcontainer.json
      run: |
        if command -v jq > /dev/null 2>&1; then
          jq empty .devcontainer/devcontainer.json
          echo "✓ devcontainer.json syntax is valid"
        else
          echo "jq not available, skipping JSON validation"
        fi
    
    - name: Generate environment and validate Dockerfile
      run: |
        # Generate environment configuration first
        bash .devcontainer/scripts/manage/setup-environment.sh full
        
        if [ -f .devcontainer/Dockerfile.generated ]; then
          echo "✓ Dockerfile.generated exists"
          # Basic Dockerfile linting
          if grep -q "FROM" .devcontainer/Dockerfile.generated; then
            echo "✓ Dockerfile.generated has FROM instruction"
          else
            echo "✗ Dockerfile.generated missing FROM instruction"
            exit 1
          fi
        else
          echo "✗ Dockerfile.generated not found"
          exit 1
        fi
    
    - name: Validate docker-compose.yml
      run: |
        if [ -f .devcontainer/docker-compose.yml ]; then
          echo "✓ docker-compose.yml exists"
          # Basic YAML validation
          if command -v python3 > /dev/null 2>&1; then
            python3 -c "import yaml; yaml.safe_load(open('.devcontainer/docker-compose.yml'))"
            echo "✓ docker-compose.yml is valid YAML"
          fi
        else
          echo "✗ docker-compose.yml not found"
          exit 1
        fi
    
    - name: Check required files
      run: |
        required_files=(
          ".devcontainer/configs/conda/environment-core.yml"
          ".devcontainer/configs/python/requirements-core.txt"
          ".devcontainer/configs/r/core-packages.R"
          ".devcontainer/scripts/utils/logging.sh"
          ".devcontainer/scripts/install/install-core.sh"
          ".devcontainer/tests/test-environment.sh"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done

  build:
    name: Build Dev Container
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: validate
    if: needs.validate.outputs.should-build == 'true' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        profile: [minimal, full]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate environment configuration
      run: |
        bash .devcontainer/scripts/manage/setup-environment.sh ${{ matrix.profile }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=sha,prefix=${{ matrix.profile }}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile.generated
        platforms: linux/amd64
        push: false  # Disable push to fix permission error for now
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PROFILE=${{ matrix.profile }}
          ENABLE_BIOINFORMATICS=${{ matrix.profile == 'full' }}

  test:
    name: Test Dev Container
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [validate, build]
    if: always() && needs.validate.result == 'success'
    
    strategy:
      matrix:
        test-suite: [quick, installation]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Dev Container CLI
      run: npm install -g @devcontainers/cli
    
    - name: Build and start dev container
      run: |
        devcontainer build --workspace-folder .
        devcontainer up --workspace-folder .
    
    - name: Debug container structure
      run: |
        devcontainer exec --workspace-folder . \
          bash -c "pwd && ls -la && ls -la .devcontainer/scripts/manage/"
    
    - name: Run test suite
      run: |
        devcontainer exec --workspace-folder . \
          bash .devcontainer/scripts/manage/test-runner.sh ${{ matrix.test-suite }} false true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-suite }}
        path: logs/test-results/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.devcontainer'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # Don't fail CI if SARIF upload has permission issues
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for secrets
      run: |
        # Check for potential secrets in configuration files
        if grep -r -i -E "(password|secret|key|token)" .devcontainer/configs/ | grep -v -E "(template|example|placeholder|PASSWORD|SECRET|KEY|TOKEN)"; then
          echo "❌ Potential secrets found in configuration files"
          exit 1
        else
          echo "✅ No secrets found in configuration files"
        fi
    
    - name: Check file permissions
      run: |
        # Check that shell scripts are executable
        find .devcontainer -name "*.sh" ! -perm -u+x > non_executable_scripts.txt
        if [ -s non_executable_scripts.txt ]; then
          echo "❌ Non-executable shell scripts found:"
          cat non_executable_scripts.txt
          exit 1
        else
          echo "✅ All shell scripts are executable"
        fi

  performance:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [validate, build]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Dev Container CLI
      run: npm install -g @devcontainers/cli
    
    - name: Benchmark container startup
      run: |
        echo "Benchmarking container startup time..."
        start_time=$(date +%s)
        devcontainer build --workspace-folder .
        devcontainer up --workspace-folder .
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        echo "Container startup time: ${duration}s"
        echo "startup_time=${duration}" >> $GITHUB_ENV
    
    - name: Benchmark package installation
      run: |
        echo "Benchmarking package installation..."
        devcontainer exec --workspace-folder . \
          bash .devcontainer/scripts/manage/test-runner.sh performance true false
    
    - name: Generate performance report
      run: |
        echo "## Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "- Container startup time: ${{ env.startup_time }}s" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed results available in test artifacts" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate documentation
      run: |
        mkdir -p docs
        cp .devcontainer/README.md docs/
        cp README.md docs/index.md 2>/dev/null || echo "# Dev Container" > docs/index.md
        
        # Generate configuration documentation
        echo "# Configuration Files" > docs/configuration.md
        echo "" >> docs/configuration.md
        echo "## Environment Files" >> docs/configuration.md
        for file in .devcontainer/configs/**/*.yml; do
          if [ -f "$file" ]; then
            echo "- $(basename $file)" >> docs/configuration.md
          fi
        done
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, security]
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Delete old container images
      uses: actions/github-script@v7
      with:
        script: |
          const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
            package_type: 'container',
            package_name: context.repo.repo,
            username: context.repo.owner
          });
          
          // Keep only the latest 10 versions
          const versions = response.data;
          if (versions.length > 10) {
            const versionsToDelete = versions.slice(10);
            for (const version of versionsToDelete) {
              await github.rest.packages.deletePackageVersionForUser({
                package_type: 'container',
                package_name: context.repo.repo,
                username: context.repo.owner,
                package_version_id: version.id
              });
              console.log(`Deleted version ${version.name}`);
            }
          }